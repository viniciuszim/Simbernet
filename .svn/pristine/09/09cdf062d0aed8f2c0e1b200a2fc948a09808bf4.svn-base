//
//  EventoViewController.m
//  Simbernet
//
//  Created by Vinicius Miguel on 08/09/15.
//  Copyright (c) 2015 Simber. All rights reserved.
//

#import "EventoViewController.h"
#import "MHOverviewController.h"
#import "UIView+RNActivityView.h"
#import "EventoService.h"
#import "EventoVisualizarViewController.h"

@implementation EventoCommentsUIButton
@end

@implementation EventoTableViewCell
@end

@interface EventoViewController () <EventoServiceDelegate> {
    NSMutableArray *eventoLista;
    NSMutableArray *paginas;
    NSNumber* pagina;
    BOOL carregou;
    
    UIRefreshControl* refreshControl;
}
@end

@implementation EventoViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // Seto pagina 1 a primeira vez que entra na lista
    pagina = [NSNumber numberWithInt:1];
    [paginas addObject:pagina];
    
    // Lista eventos do Java
    [self launchReload];
    
    // Initialize the refresh control.
    refreshControl = [[UIRefreshControl alloc] init];
    refreshControl.backgroundColor = [UIColor lightGrayColor];
    refreshControl.tintColor = [UIColor whiteColor];
    [refreshControl addTarget:self
                       action:@selector(updateEventos)
             forControlEvents:UIControlEventValueChanged];
    
    refreshControl.attributedTitle = [EventoModel getUltimaAtualizacao];
    
    [self.tableView addSubview:refreshControl];
    
    self.tableView.backgroundColor = [UIColor colorWithRed:0.83 green:0.84 blue:0.86 alpha:1];
}

-(void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    // Loading
    if (!carregou) {
        [self.navigationController.view showActivityViewWithLabel:@"Carregando"];
    }
}

-(void)updateEventos {
    
    // Seto pagina 1 para buscar do início com o refresh
    pagina = [NSNumber numberWithInt:1];
    [paginas addObject:pagina];
    
    // Lista eventos do Java
    [self launchReload];
}

-(void)launchReload {
    EventoService* eventoService = [EventoService new];
    eventoService.delegate = self;
    [eventoService listEventos: pagina.intValue];
}

#pragma mark - SlideNavigationController Methods -

- (BOOL)slideNavigationControllerShouldDisplayLeftMenu
{
    return YES;
}

-(UIStatusBarStyle)preferredStatusBarStyle{
    if ([self.presentedViewController isKindOfClass:[MHGalleryController class]]) {
        MHGalleryController *gallerController = (MHGalleryController*)self.presentedViewController;
        return gallerController.preferredStatusBarStyleMH;
    }
    return UIStatusBarStyleDefault;
}

-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return eventoLista.count;
}

-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{
    return 1;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    EventoModel *evento = (EventoModel *) [eventoLista objectAtIndex:indexPath.section];
    if (evento.foto && ![@"(null)" isEqual:evento.foto] && ![(NSString *)[NSNull null] isEqual:evento.foto] && ![@"" isEqual:evento.foto]) {
        return 435;
    } else {
        return 95;
    }
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    
    EventoModel *evento = (EventoModel *) [eventoLista objectAtIndex:indexPath.section];
    if (evento.foto && ![@"(null)" isEqual:evento.foto] && ![(NSString *)[NSNull null] isEqual:evento.foto] && ![@"" isEqual:evento.foto]) {
        return CGSizeMake(collectionView.frame.size.width, collectionView.frame.size.height);
    } else {
        return CGSizeMake(0, 0);
    }
}

-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView{
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return 1;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
        
    static NSString *simpleTableIdentifier = @"EventoTableViewCell";
    
    EventoTableViewCell *cell = (EventoTableViewCell *)[tableView dequeueReusableCellWithIdentifier:simpleTableIdentifier];
    
    if (cell == nil) {
        cell = [self.tableView dequeueReusableCellWithIdentifier:simpleTableIdentifier];
    }
    
    if (carregou) {
        cell.backView.hidden = NO;
        cell.collectionView.hidden = NO;
        cell.titleLabel.hidden = NO;
        cell.dataLabel.hidden = NO;
        cell.descriptionLabel.hidden = NO;
        cell.continueReadingButton.hidden = NO;
    }
    
    if (indexPath.section == [eventoLista count] - 1)
    {
        int value = [pagina intValue];
        pagina = [NSNumber numberWithInt:value + 1];
        
        [self launchReload];
        [self.navigationController.view showActivityViewWithLabel:@"Carregando"];
        [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:NO];
    }
    
    EventoModel *evento = (EventoModel *) [eventoLista objectAtIndex:indexPath.section];
    
    cell.titleLabel.text = evento.titulo;
    cell.descriptionLabel.text = evento.resumo;
    
    // Data do Evento
    if (![@"(null)" isEqual:evento.dtInicioAux] && ![(NSString *)[NSNull null] isEqual:evento.dtInicioAux] && ![@"" isEqual:evento.dtInicioAux]) {
        cell.dataLabel.text = [EventoModel getFullHour:evento];
    } else {
        cell.dataLabel.text = @"-";
    }
    
    // Altera a largura da label do Titulo
    CGRect rectFrameTitle = CGRectMake(cell.titleLabel.frame.origin.x,
                                       cell.titleLabel.frame.origin.y,
                                       self.view.frame.size.width - 30,
                                       cell.titleLabel.frame.size.height);
    cell.titleLabel.frame = rectFrameTitle;
    // Altera a largura da label Descricao
    CGRect rectFrameDescriptioon = CGRectMake(cell.descriptionLabel.frame.origin.x,
                                              cell.descriptionLabel.frame.origin.y,
                                              self.view.frame.size.width - 30,
                                              cell.descriptionLabel.frame.size.height);
    cell.descriptionLabel.frame = rectFrameDescriptioon;
    
    // Botao Continuar lendo...
    cell.continueReadingButton.evento = evento;
    [cell.continueReadingButton setTitle:@"... Continuar lendo"
                                forState:UIControlStateNormal];
    cell.continueReadingButton.backgroundColor = [UIColor whiteColor];
    cell.continueReadingButton.frame = CGRectMake(self.view.frame.size.width - 120,
                                                  cell.descriptionLabel.frame.origin.y + 22,
                                                  110, 15);
    
    // Botao Comentarios
    cell.commentsButton.evento = evento;
    if (evento.totalComentarios == 1) {
        NSString *labelButton = [NSString stringWithFormat:@"%ld %@", evento.totalComentarios, @"comentário"];
        [cell.commentsButton setTitle:labelButton forState:UIControlStateNormal];
        [cell.commentsButton setHidden:NO];
    } else if (evento.totalComentarios > 1) {
        NSString *labelButton = [NSString stringWithFormat:@"%ld %@", evento.totalComentarios, @"comentários"];
        [cell.commentsButton setTitle:labelButton forState:UIControlStateNormal];
        [cell.commentsButton addTarget:self
                                action:@selector(goListComments:)
                      forControlEvents:UIControlEventTouchUpInside];
        [cell.commentsButton setHidden:NO];
    } else {
        [cell.commentsButton setHidden:YES];
    }
    
    
    
    if (evento.foto && ![@"(null)" isEqual:evento.foto] && ![(NSString *)[NSNull null] isEqual:evento.foto] && ![@"" isEqual:evento.foto]) {
        
        // Altera o tamanho da View, que é onde os dados da celula ficam em cima
        CGRect rectFrame = CGRectMake(cell.backView.frame.origin.x,
                                      cell.backView.frame.origin.y,
                                      self.view.frame.size.width - 20,
                                      428);
        cell.backView.frame = rectFrame;
        
        // Coloca o layout na Collection
        UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc] init];
        layout.sectionInset = UIEdgeInsetsMake(0, 0, 0, 20);
        layout.itemSize = CGSizeMake(self.view.frame.size.width, self.view.frame.size.width);
        layout.minimumLineSpacing = 10;
        layout.minimumInteritemSpacing = 10;
        layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;
        cell.collectionView.collectionViewLayout = layout;
        
        [cell.collectionView registerClass:[MHMediaPreviewCollectionViewCell class] forCellWithReuseIdentifier:@"MHMediaPreviewCollectionViewCell"];
        
        cell.collectionView.autoresizingMask = UIViewAutoresizingFlexibleHeight|UIViewAutoresizingFlexibleWidth;
        
        [cell.collectionView setShowsHorizontalScrollIndicator:NO];
        [cell.collectionView setDelegate:self];
        [cell.collectionView setDataSource:self];
        [cell.collectionView setTag:indexPath.section];
        
        [cell.collectionView reloadData];
    } else {
        
        // Altera o tamanho da View, que é onde os dados da celula ficam em cima
        CGRect rectFrame = CGRectMake(cell.backView.frame.origin.x,
                                      cell.backView.frame.origin.y,
                                      self.view.frame.size.width - 20,
                                      88);
        cell.backView.frame = rectFrame;
        
        [cell.collectionView removeFromSuperview];
    }
    
    cell.backView.layer.masksToBounds = NO;
    cell.backView.layer.shadowOffset = CGSizeMake(0, 0);
    cell.backView.layer.shadowRadius = 1.0;
    cell.backView.layer.shadowColor = [UIColor blackColor].CGColor;
    cell.backView.layer.shadowOpacity = 0.5;
    cell.backView.layer.shadowPath = [UIBezierPath bezierPathWithRect:cell.backView.bounds].CGPath;
    cell.backView.layer.cornerRadius = 2.0;
    
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    
    return cell;
}

-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    UICollectionViewCell *cell = nil;
    
    NSString *cellIdentifier = @"MHMediaPreviewCollectionViewCell";
    
    cell = [collectionView dequeueReusableCellWithReuseIdentifier:cellIdentifier forIndexPath:indexPath];
    
    NSIndexPath *indexPathNew = [NSIndexPath indexPathForRow:indexPath.row inSection:collectionView.tag];
    
    [self makeOverViewDetailCell:(MHMediaPreviewCollectionViewCell*)cell atIndexPath:indexPathNew];
    
    EventoModel *evento = (EventoModel *) [eventoLista objectAtIndex:indexPath.section];
    if (evento.foto && ![@"(null)" isEqual:evento.foto] && ![(NSString *)[NSNull null] isEqual:evento.foto] && ![@"" isEqual:evento.foto]) {
        cell.hidden = NO;
    } else {
        cell.hidden = YES;
    }
    
    return cell;
}


-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath{
    
    UIImageView *imageView = [(MHMediaPreviewCollectionViewCell*)[collectionView cellForItemAtIndexPath:indexPath] thumbnail];
    
    MHGalleryItem *item = nil;
    EventoModel *evento = (EventoModel *) [eventoLista objectAtIndex:collectionView.tag];
    
    if (evento.foto && ![@"(null)" isEqual:evento.foto] && ![(NSString *)[NSNull null] isEqual:evento.foto] && ![@"" isEqual:evento.foto]) {
        NSString *URLFoto = [NSString stringWithFormat:@"%@%@%@", HTTP_Repositorio, HTTP_PathFotosEvento, evento.foto];
        item = [MHGalleryItem.alloc initWithURL:URLFoto
                                    galleryType:MHGalleryTypeImage];
        
        NSArray *galleryData = @[item];
        
        MHGalleryController *gallery = [MHGalleryController galleryWithPresentationStyle:MHGalleryViewModeImageViewerNavigationBarShown];
        gallery.galleryItems = galleryData;
        gallery.presentingFromImageView = imageView;
        gallery.presentationIndex = indexPath.row;
        // gallery.UICustomization.hideShare = YES;
        //  gallery.galleryDelegate = self;
        //  gallery.dataSource = self;
        __weak MHGalleryController *blockGallery = gallery;
        
        gallery.finishedCallback = ^(NSInteger currentIndex,UIImage *image,MHTransitionDismissMHGallery *interactiveTransition,MHGalleryViewMode viewMode){
            if (viewMode == MHGalleryViewModeOverView) {
                [blockGallery dismissViewControllerAnimated:YES completion:^{
                    [self setNeedsStatusBarAppearanceUpdate];
                }];
            }else{
                NSIndexPath *newIndexPath = [NSIndexPath indexPathForRow:currentIndex inSection:0];
                CGRect cellFrame  = [[collectionView collectionViewLayout] layoutAttributesForItemAtIndexPath:newIndexPath].frame;
                [collectionView scrollRectToVisible:cellFrame
                                           animated:NO];
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    [collectionView reloadItemsAtIndexPaths:@[newIndexPath]];
                    [collectionView scrollToItemAtIndexPath:newIndexPath atScrollPosition:UICollectionViewScrollPositionCenteredHorizontally animated:NO];
                    
                    MHMediaPreviewCollectionViewCell *cell = (MHMediaPreviewCollectionViewCell*)[collectionView cellForItemAtIndexPath:newIndexPath];
                    
                    [blockGallery dismissViewControllerAnimated:YES dismissImageView:cell.thumbnail completion:^{
                        
                        [self setNeedsStatusBarAppearanceUpdate];
                        
                        MPMoviePlayerController *player = interactiveTransition.moviePlayer;
                        
                        player.controlStyle = MPMovieControlStyleEmbedded;
                        player.view.frame = cell.bounds;
                        player.scalingMode = MPMovieScalingModeAspectFill;
                        [cell.contentView addSubview:player.view];
                    }];
                });
            }
        };
        [self presentMHGalleryController:gallery animated:YES completion:nil];
    }
    
}

-(NSInteger)numberOfItemsInGallery:(MHGalleryController *)galleryController{
    return 10;
}

-(MHGalleryItem *)itemForIndex:(NSInteger)index{
    // You also have to set the image in the Testcell to get the correct Animation
    //    return [MHGalleryItem.alloc initWithImage:nil];
    return [MHGalleryItem itemWithImage:[UIImage imageNamed:@"twitterMH"]];
}

-(NSUInteger)supportedInterfaceOrientations{
    return UIInterfaceOrientationMaskPortrait;
}

-(BOOL)shouldAutorotate{
    return NO;
}

-(void)makeOverViewDetailCell:(MHMediaPreviewCollectionViewCell*)cell atIndexPath:(NSIndexPath*)indexPath{
    //MHGalleryItem *item = self.galleryDataSource[indexPath.section][indexPath.row];
    MHGalleryItem *item = nil;
    
    EventoModel *evento = (EventoModel *) [eventoLista objectAtIndex:indexPath.section];
    
    cell.thumbnail.image = nil;
    
    if (evento.foto && ![@"(null)" isEqual:evento.foto] && ![(NSString *)[NSNull null] isEqual:evento.foto] && ![@"" isEqual:evento.foto]) {
        NSString *URLFoto = [NSString stringWithFormat:@"%@%@%@", HTTP_Repositorio, HTTP_PathFotosEvento, evento.foto];
        item = [MHGalleryItem.alloc initWithURL:URLFoto
                                    galleryType:MHGalleryTypeImage];
        
        cell.thumbnail.contentMode = UIViewContentModeScaleAspectFill;
        
        cell.thumbnail.layer.shadowOffset = CGSizeMake(0, 0);
        cell.thumbnail.layer.shadowRadius = 1.0;
        cell.thumbnail.layer.shadowColor = [UIColor blackColor].CGColor;
        cell.thumbnail.layer.shadowOpacity = 0.5;
        cell.thumbnail.layer.shadowPath = [UIBezierPath bezierPathWithRect:cell.thumbnail.bounds].CGPath;
        cell.thumbnail.layer.cornerRadius = 2.0;
        
        cell.galleryItem = item;
    }
}

- (IBAction)eventoVisualizar:(EventoCommentsUIButton *)sender {
    [self performSegueWithIdentifier:SEGUE_EVENTOS_EVENTO_VISUALIZAR sender:sender];
}

- (IBAction)goListComments:(EventoCommentsUIButton *)sender {
    [self performSegueWithIdentifier:SEGUE_EVENTOS_EVENTO_VISUALIZAR sender:sender];
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(EventoCommentsUIButton *)botao {
    EventoVisualizarViewController *controller = segue.destinationViewController;
    controller.evento = botao.evento;
}

#pragma mark - Delegate

- (void)listEventosReturns:(NSMutableArray *)list {
    if (eventoLista == nil || pagina.intValue == 1) {
        eventoLista = [NSMutableArray arrayWithArray:list];
    } else {
        [eventoLista addObjectsFromArray: list];
    }
    
    carregou = YES;
    
    // Esconde loading activity
    [self.navigationController.view hideActivityView];
    
    [self.tableView reloadData];
//    [self setNeedsStatusBarAppearanceUpdate];
    
    // End the refreshing
    if (refreshControl) {
        
        [refreshControl endRefreshing];
        
        [EventoModel setUltimaAtualizacao];
        refreshControl.attributedTitle = [EventoModel getUltimaAtualizacao];
    }
}

- (void)error:(NSString *)error onMethod:(NSString *)method withRequest:(HttpRequest *)request {
    
}

@end
